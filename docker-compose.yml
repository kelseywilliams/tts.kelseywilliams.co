# Most recent docker compose version
version: "3.8"

services:
  # maybe?
  # mail:
  #     image: docker.io/mailserver/docker-mailserver

  #     # set hostname of name server.  This matches the hostname dictated in the MX record for the specified hostname
  #     hostname: mail.kelseywilliams.co
  #     ports:
  #       - "25:25"
  #       - "587:587"
  #       - "465:465"

  #     volumes:
  #       - ./docker-data/dms/mail-data/:/var/mail/
  #       - ./docker-data/dms/mail-state/:/var/mail-state/
  #       - ./docker-data/dms/mail-logs/:/var/log/mail/
  #       - ./docker-data/dms/config/:/tmp/docker-mailserver/
  #       - /etc/localtime:/etc/localtime:ro
  #     environment:
  #       - ENABLE_FAIL2BAN=1
  #       # If letsencrypt for SSL/TLS certificate is used (otherwise adapt)
  #       # - SSL_TYPE=letsencrypt
  #       - PERMIT_DOCKER=network
  #       - ONE_DIR=1
  #       - ENABLE_POSTGREY=0
  #       - ENABLE_CLAMAV=0
  #       - ENABLE_SPAMASSASSIN=0
  #       - SPOOF_PROTECTION=0
  #     cap_add:
  #       - NET_ADMIN # For Fail2Ban to work
  #       - SYS_PTRACE
  web:
    # Builds web service image from docker file in ./web
    build: ./web

    # Set container name
    container_name: web

    # Map apache logs to apache_logs volume
    volumes:
      - apache_logs:/var/log/apache2
    # maps host port 8080 to container port 8080
    ports:
      - "80:80"
      - "443:443"

    healthcheck:
      test:  ["CMD", "curl", "-f", "https://kelseywilliams.co"]
      interval: 10s
      timeout: 1s

  db:
    # Builds image from mysql image
    image: mysql

    # Initialize environment variables
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "true"
      MYSQL_DATABASE: dummy
    # Restart on failure of mysql daemon
    restart: always
    # Map host port 3306 to container port 3306
    ports:
      - "3306:3306"
      - "33060:33060"
    # Test mysql server is healthy with ping
    healthcheck:
      test: mysql -u root -h db -e '\q' || exit 1
      interval: 2s
      timeout: 1s
      retries: 30
      start_period: 5s

  seeder:
    # Build seeder image from dockerfile in ./seeder
    build: ./seeder 

    # if db service is healthy, start db_seeder service
    depends_on:
      db:
        condition: service_healthy

  backup:
    # Image for a cron daemon that will run parallel to web and db containers
    build: ./backup

    # Map backup to db backup
    volumes:
      - backup_vol:/dump/

    # Restart on failure of cron daemon
    restart: always

    # Allow access to terminal
    #tty: true



# Volume to hold history/legacy data 
volumes:
  apache_logs:
  backup_vol:


